// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String    @unique
  emailVerified       DateTime?
  isEmailVerified     Boolean   @default(false)
  emailVerifiedAt     DateTime?
  image               String?
  role                UserRole  @default(INTERN)
  bio                 String?
  resume              String?
  resumeGDriveLink    String?
  skillCredits        Int       @default(0)
  companyId           String?
  isActive            Boolean   @default(true)
  phone               String?
  linkedin            String?
  github              String?
  website             String?
  location            String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  internships   InternshipApplication[]
  mentorships   Internship[] @relation("MentorInternships")
  tasks         Task[]
  submissions   TaskSubmission[]
  creditHistory CreditHistory[]
  certificates  Certificate[]
  chatMessages  ChatMessage[]
  company       Company? @relation(fields: [companyId], references: [id])
  sentMessages  Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  companyMentorships CompanyInternship[] @relation("CompanyMentorships")
  companyApplications CompanyInternshipApplication[] @relation("CompanyApplications")
  jobApplications JobApplication[] @relation("JobApplications")
  analytics     StudentAnalytics? @relation("StudentAnalytics")
  notificationPreferences NotificationPreferences? @relation("UserNotificationPreferences")
  wallet        Wallet? @relation("UserWallet")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Internship {
  id              String           @id @default(cuid())
  title           String
  description     String           @db.Text
  domain          String
  duration        Int              // in weeks
  isPaid          Boolean          @default(false)
  stipend         Float?
  mentorId        String
  status          InternshipStatus @default(ACTIVE)
  maxInterns      Int              @default(1)
  skills          Json?            // Array of required skills
  requirements    Json?            // Array of requirements
  responsibilities Json?           // Array of responsibilities
  benefits        Json?            // Array of benefits
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  mentor       User                    @relation("MentorInternships", fields: [mentorId], references: [id])
  applications InternshipApplication[]
  tasks        Task[]
  projectRooms ProjectRoom[]

  @@map("internships")
}

model InternshipApplication {
  id           String                @id @default(cuid())
  internshipId String
  userId       String
  status       ApplicationStatus     @default(PENDING)
  coverLetter  String?               @db.Text
  resumeUrl    String?
  resumeLink   String?
  phone        String?
  linkedin     String?
  github       String?
  portfolio    String?
  experience   String?               @db.Text
  motivation   String?               @db.Text
  appliedAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  internship Internship @relation(fields: [internshipId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@unique([internshipId, userId])
  @@map("internship_applications")
}

model Task {
  id           String     @id @default(cuid())
  title        String
  description  String     @db.Text
  internshipId String
  assignedTo   String
  status       TaskStatus @default(PENDING)
  dueDate      DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  internship  Internship       @relation(fields: [internshipId], references: [id])
  assignee    User             @relation(fields: [assignedTo], references: [id])
  submissions TaskSubmission[]

  @@map("tasks")
}

model TaskSubmission {
  id          String           @id @default(cuid())
  taskId      String
  userId      String
  content     String           @db.Text
  fileUrl     String?
  status      SubmissionStatus @default(SUBMITTED)
  feedback    String?
  creditsAwarded Int           @default(0)
  submittedAt DateTime         @default(now())
  reviewedAt  DateTime?

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("task_submissions")
}

model CreditHistory {
  id          String      @id @default(cuid())
  userId      String
  amount      Int
  type        CreditType
  description String
  createdAt   DateTime    @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("credit_history")
}

model Certificate {
  id           String            @id @default(cuid())
  userId       String
  internshipId String?
  title        String
  description  String
  issueDate    DateTime          @default(now())
  certificateUrl String?
  nftTokenId   String?
  status       CertificateStatus @default(ISSUED)

  user User @relation(fields: [userId], references: [id])

  @@map("certificates")
}

model ProjectRoom {
  id           String @id @default(cuid())
  internshipId String
  name         String
  description  String?
  createdAt    DateTime @default(now())

  internship   Internship    @relation(fields: [internshipId], references: [id])
  chatMessages ChatMessage[]

  @@map("project_rooms")
}

model ChatMessage {
  id            String   @id @default(cuid())
  projectRoomId String
  userId        String
  content       String   @db.Text
  createdAt     DateTime @default(now())

  projectRoom ProjectRoom @relation(fields: [projectRoomId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@map("chat_messages")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  website     String?
  logo        String?
  industry    String?
  size        String?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  internships CompanyInternship[]
  jobPostings JobPosting[]

  @@map("companies")
}

model CompanyInternship {
  id          String           @id @default(cuid())
  companyId   String
  title       String
  description String           @db.Text
  domain      String
  duration    Int              // in weeks
  isPaid      Boolean          @default(false)
  stipend     Float?
  mentorId    String?
  status      InternshipStatus @default(ACTIVE)
  maxInterns  Int              @default(1)
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  company      Company                    @relation(fields: [companyId], references: [id])
  mentor       User?                      @relation("CompanyMentorships", fields: [mentorId], references: [id])
  applications CompanyInternshipApplication[]

  @@map("company_internships")
}

model CompanyInternshipApplication {
  id           String                @id @default(cuid())
  internshipId String
  userId       String
  status       ApplicationStatus     @default(PENDING)
  appliedAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  internship CompanyInternship @relation(fields: [internshipId], references: [id])
  user       User              @relation("CompanyApplications", fields: [userId], references: [id])

  @@unique([internshipId, userId])
  @@map("company_internship_applications")
}

model JobPosting {
  id          String    @id @default(cuid())
  companyId   String
  title       String
  description String    @db.Text
  requirements String?  @db.Text
  location    String?
  jobType     JobType   @default(FULL_TIME)
  salaryMin   Float?
  salaryMax   Float?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  company      Company           @relation(fields: [companyId], references: [id])
  applications JobApplication[]

  @@map("job_postings")
}

model JobApplication {
  id          String            @id @default(cuid())
  jobId       String
  userId      String
  status      ApplicationStatus @default(PENDING)
  coverLetter String?           @db.Text
  appliedAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  job  JobPosting @relation(fields: [jobId], references: [id])
  user User       @relation("JobApplications", fields: [userId], references: [id])

  @@unique([jobId, userId])
  @@map("job_applications")
}

model Message {
  id         String      @id @default(cuid())
  senderId   String
  receiverId String?
  subject    String
  content    String      @db.Text
  type       MessageType @default(DIRECT)
  isRead     Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  sender   User  @relation("SentMessages", fields: [senderId], references: [id])
  receiver User? @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@map("messages")
}

model StudentAnalytics {
  id                String   @id @default(cuid())
  userId            String   @unique
  totalTasks        Int      @default(0)
  completedTasks    Int      @default(0)
  pendingTasks      Int      @default(0)
  overdueTasks      Int      @default(0)
  averageScore      Float    @default(0)
  totalSubmissions  Int      @default(0)
  onTimeSubmissions Int      @default(0)
  lateSubmissions   Int      @default(0)
  totalCredits      Int      @default(0)
  lastActive        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation("StudentAnalytics", fields: [userId], references: [id])

  @@map("student_analytics")
}

enum UserRole {
  INTERN
  MENTOR
  ADMIN
  COMPANY_ADMIN
  COMPANY_MANAGER
  HR_MANAGER
  COMPANY_COORDINATOR
}

enum InternshipStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum SubmissionStatus {
  SUBMITTED
  APPROVED
  REJECTED
  NEEDS_REVISION
}

enum CreditType {
  EARNED
  SPENT
  BONUS
  PENALTY
}

enum CertificateStatus {
  ISSUED
  MINTED
  REVOKED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  REMOTE
}

enum MessageType {
  DIRECT
  BROADCAST
  SYSTEM
  NOTIFICATION
}

model NotificationPreferences {
  id                  String   @id @default(cuid())
  userId              String   @unique
  emailNotifications  Boolean  @default(true)
  taskReminders       Boolean  @default(true)
  mentorMessages      Boolean  @default(true)
  certificateUpdates  Boolean  @default(true)
  marketingEmails     Boolean  @default(false)
  pushNotifications   Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user User @relation("UserNotificationPreferences", fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model Wallet {
  id              String             @id @default(cuid())
  userId          String             @unique
  balance         Float              @default(0)
  totalEarned     Float              @default(0)
  totalSpent      Float              @default(0)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  user         User                @relation("UserWallet", fields: [userId], references: [id], onDelete: Cascade)
  transactions WalletTransaction[]

  @@map("wallets")
}

model WalletTransaction {
  id          String                @id @default(cuid())
  walletId    String
  amount      Float
  type        WalletTransactionType
  description String
  reference   String?               // Reference to related entity (task, internship, etc.)
  createdAt   DateTime              @default(now())

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("wallet_transactions")
}

enum WalletTransactionType {
  DEPOSIT
  WITHDRAWAL
  EARNED
  SPENT
  BONUS
  REFUND
}